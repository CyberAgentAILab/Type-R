diff --git a/DeepSolo++/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu b/DeepSolo++/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu
index 951f5d7..02b0cbf 100644
--- a/DeepSolo++/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu
+++ b/DeepSolo++/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu
@@ -61,7 +61,7 @@ at::Tensor ms_deform_attn_cuda_forward(
     for (int n = 0; n < batch/im2col_step_; ++n)
     {
         auto columns = output_n.select(0, n);
-        AT_DISPATCH_FLOATING_TYPES(value.type(), "ms_deform_attn_forward_cuda", ([&] {
+        AT_DISPATCH_FLOATING_TYPES(value.scalar_type(), "ms_deform_attn_forward_cuda", ([&] {
             ms_deformable_im2col_cuda(at::cuda::getCurrentCUDAStream(),
                 value.data<scalar_t>() + n * im2col_step_ * per_value_size,
                 spatial_shapes.data<int64_t>(),
@@ -131,7 +131,7 @@ std::vector<at::Tensor> ms_deform_attn_cuda_backward(
     for (int n = 0; n < batch/im2col_step_; ++n)
     {
         auto grad_output_g = grad_output_n.select(0, n);
-        AT_DISPATCH_FLOATING_TYPES(value.type(), "ms_deform_attn_backward_cuda", ([&] {
+        AT_DISPATCH_FLOATING_TYPES(value.scalar_type(), "ms_deform_attn_backward_cuda", ([&] {
             ms_deformable_col2im_cuda(at::cuda::getCurrentCUDAStream(),
                                     grad_output_g.data<scalar_t>(),
                                     value.data<scalar_t>() + n * im2col_step_ * per_value_size,
diff --git a/DeepSolo/adet/data/builtin.py b/DeepSolo/adet/data/builtin.py
index 024e72e..c8bb0ed 100644
--- a/DeepSolo/adet/data/builtin.py
+++ b/DeepSolo/adet/data/builtin.py
@@ -1,10 +1,7 @@
 import os
-import argparse
 from detectron2.data.datasets.register_coco import register_coco_instances
-from detectron2.data.datasets.builtin_meta import _get_builtin_metadata
 from .datasets.text import register_text_instances
-from adet.config import get_cfg
-from detectron2.engine import default_argument_parser
+
 
 _PREDEFINED_SPLITS_PIC = {
     "pic_person_train": ("pic/image/train", "pic/annotations/train_person.json"),
@@ -76,23 +73,4 @@ def register_all_coco(root="datasets", voc_size_cfg=37, num_pts_cfg=25):
         )
 
 
-# get the vocabulary size and number of point queries in each instance
-# to eliminate blank text and sample gt according to Bezier control points
-parser = default_argument_parser()
-# add the following argument to avoid some errors while running demo/demo.py
-parser.add_argument("--input", nargs="+", help="A list of space separated input images")
-parser.add_argument(
-    "--output",
-    help="A file or directory to save output visualizations. "
-    "If not given, will show output in an OpenCV window.",
-)
-parser.add_argument(
-    "--opts",
-    help="Modify config options using the command-line 'KEY VALUE' pairs",
-    default=[],
-    nargs=argparse.REMAINDER,
-    )
-args = parser.parse_args()
-cfg = get_cfg()
-cfg.merge_from_file(args.config_file)
-register_all_coco(voc_size_cfg=cfg.MODEL.TRANSFORMER.VOC_SIZE, num_pts_cfg=cfg.MODEL.TRANSFORMER.NUM_POINTS)
+register_all_coco()
\ No newline at end of file
diff --git a/DeepSolo/adet/data/datasets/__init__.py b/DeepSolo/adet/data/datasets/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cpu.cpp b/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cpu.cpp
index e1bf854..2dc1ec1 100644
--- a/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cpu.cpp
+++ b/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cpu.cpp
@@ -11,7 +11,6 @@
 #include <vector>
 
 #include <ATen/ATen.h>
-#include <ATen/cuda/CUDAContext.h>
 
 
 at::Tensor
diff --git a/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu b/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu
index 951f5d7..02b0cbf 100644
--- a/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu
+++ b/DeepSolo/adet/layers/csrc/DeformAttn/ms_deform_attn_cuda.cu
@@ -61,7 +61,7 @@ at::Tensor ms_deform_attn_cuda_forward(
     for (int n = 0; n < batch/im2col_step_; ++n)
     {
         auto columns = output_n.select(0, n);
-        AT_DISPATCH_FLOATING_TYPES(value.type(), "ms_deform_attn_forward_cuda", ([&] {
+        AT_DISPATCH_FLOATING_TYPES(value.scalar_type(), "ms_deform_attn_forward_cuda", ([&] {
             ms_deformable_im2col_cuda(at::cuda::getCurrentCUDAStream(),
                 value.data<scalar_t>() + n * im2col_step_ * per_value_size,
                 spatial_shapes.data<int64_t>(),
@@ -131,7 +131,7 @@ std::vector<at::Tensor> ms_deform_attn_cuda_backward(
     for (int n = 0; n < batch/im2col_step_; ++n)
     {
         auto grad_output_g = grad_output_n.select(0, n);
-        AT_DISPATCH_FLOATING_TYPES(value.type(), "ms_deform_attn_backward_cuda", ([&] {
+        AT_DISPATCH_FLOATING_TYPES(value.scalar_type(), "ms_deform_attn_backward_cuda", ([&] {
             ms_deformable_col2im_cuda(at::cuda::getCurrentCUDAStream(),
                                     grad_output_g.data<scalar_t>(),
                                     value.data<scalar_t>() + n * im2col_step_ * per_value_size,
diff --git a/DeepSolo/adet/modeling/__init__.py b/DeepSolo/adet/modeling/__init__.py
index 91e6ca2..9118d7a 100644
--- a/DeepSolo/adet/modeling/__init__.py
+++ b/DeepSolo/adet/modeling/__init__.py
@@ -1,4 +1,5 @@
 # Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
+from . import vitae_v2  # noqa # isort:skip
 from .text_spotter import TransformerPureDetector
 
 _EXCLUDE = {"torch", "ShapeSpec"}
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..3bd1718
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,35 @@
+[build-system]
+requires = [
+    "setuptools",
+    "wheel",
+    "numpy>=2.0.0",
+    "torch",
+]
+build-backend = "setuptools.build_meta"
+
+[project]
+name = "DeepSolo"
+version = "0.2.0"
+description = "DeepSolo: Let Transformer Decoder with Explicit Points Solo for Text Spotting."
+authors = [
+    { name = "ViTAE-Transformer" },
+]
+dependencies=[
+    "Pillow>=6.0",
+    "yacs>=0.1.6",
+    "tabulate",
+    "rapidfuzz",
+    "Polygon3",
+    "shapely",
+    "scikit-image",
+    "editdistance",
+    "opencv-python",
+    "detectron2",
+    "protobuf>=3.20,<4.0",
+]
+
+[project.urls]
+homepage = "https://github.com/ViTAE-Transformer/DeepSolo"
+
+[tool.uv.sources]
+detectron2 = { path = "../detectron2" }
\ No newline at end of file
diff --git a/setup.py b/setup.py
new file mode 100644
index 0000000..b8346b3
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,68 @@
+#!/usr/bin/env python
+# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
+
+import glob
+import os
+from setuptools import find_packages, setup
+import torch
+from torch.utils.cpp_extension import CUDA_HOME, CppExtension, CUDAExtension
+
+torch_ver = [int(x) for x in torch.__version__.split(".")[:2]]
+assert torch_ver >= [1, 3], "Requires PyTorch >= 1.3"
+
+PROJECT = "DeepSolo"
+
+def get_extensions():
+    extensions_dir = os.path.join(PROJECT, "adet", "layers", "csrc")
+
+    main_source = os.path.join(extensions_dir, "vision.cpp")
+    sources = glob.glob(os.path.join(extensions_dir, "**", "*.cpp"))
+    source_cuda = glob.glob(os.path.join(extensions_dir, "**", "*.cu")) + glob.glob(
+        os.path.join(extensions_dir, "*.cu")
+    )
+
+    sources = [main_source] + sources
+
+    extension = CppExtension
+
+    extra_compile_args = {"cxx": []}
+    define_macros = []
+
+    if (CUDA_HOME is not None) or os.getenv("FORCE_CUDA", "0") == "1":
+        extension = CUDAExtension
+        sources += source_cuda
+        define_macros += [("WITH_CUDA", None)]
+        extra_compile_args["nvcc"] = [
+            "-DCUDA_HAS_FP16=1",
+            "-D__CUDA_NO_HALF_OPERATORS__",
+            "-D__CUDA_NO_HALF_CONVERSIONS__",
+            "-D__CUDA_NO_HALF2_OPERATORS__",
+        ]
+
+        if torch_ver < [1, 7]:
+            # supported by https://github.com/pytorch/pytorch/pull/43931
+            CC = os.environ.get("CC", None)
+            if CC is not None:
+                extra_compile_args["nvcc"].append("-ccbin={}".format(CC))
+
+    include_dirs = [extensions_dir]
+
+    ext_modules = [
+        extension(
+            "adet._C",
+            sources,
+            include_dirs=include_dirs,
+            define_macros=define_macros,
+            extra_compile_args=extra_compile_args,
+        )
+    ]
+
+    return ext_modules
+
+
+setup(
+    packages=find_packages(where=PROJECT, exclude=("configs", "tests")),
+    package_dir={"": PROJECT},
+    ext_modules=get_extensions(),
+    cmdclass={"build_ext": torch.utils.cpp_extension.BuildExtension.with_options(use_ninja=False)},
+)
